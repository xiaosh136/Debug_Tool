; Additional ThreadX Menues

add
menu
(
  popup "&ThreadX"
  (
    default
    menuitem "Display &Threads"      "TASK.THread"
    menuitem "Display T&imers"       "TASK.TImer"
    menuitem "Display &Queues"       "TASK.QUeue"
    menuitem "Display &Semaphores"   "TASK.SEmaphore"
    menuitem "Display &Mutexes"      "TASK.MUtex"
    menuitem "Display &Events"       "TASK.EVent"
    menuitem "Display &Block Memory" "TASK.BLockmem"
    menuitem "Display Byte &Memory"  "TASK.BYtemem"
    separator
    popup "&Stack Coverage"
    (
      menuitem "List Stacks"           "TASK.STacK"
      menuitem "Add Task to Cov"       "TASK.STacK.ADD"
      menuitem "Remove Task from Cov"  "TASK.STacK.ReMove"
      enable ice()||fire()
      menuitem "Reset Coverage" "TASK.STacK.RESet"
    )
  )
  popup "Trace"
  (
    popup "[:alist]List"
    (
      separator
      menuitem "&Task Switches"     "Trace.List List.TASK"
      menuitem "&Default and Tasks" "Trace.List List.TASK DEFault"
    )
  )
  popup "&Perf"
  (
    separator
    popup "&Task Runtime"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
        )
        if (ice()||fire())&&!a.mode.flow()
        (
          Analyzer.ReProgram
          (
            Sample.Enable if AlphaBreak&&Write
          )
          Break.Delete /Alpha
          Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
        )
        if a.mode.flow()
        (
          Break.Delete /TraceEnable
          Break.Set task.config(magic) /TraceEnable
        )
      )
      menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASK"
      menuitem "[:achart]Show as &Timing" "Trace.CHART.TASK"
      menuitem "[:achart]Tracking with Trace &List"
      (
        Trace.List List.TASK DEFault /Track
        Trace.CHART.TASK /Track
      )
    )
    popup "&Task Function Runtime"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
          Analyzer.STATistic.PreFetch on
        )

        if (ice()||fire())&&!a.mode.flow()
        (
          if a.config.hac()
          (
             Analyzer.ReProgram
             (
               Sample.Enable if AlphaBreak
               Sample.Enable if BetaBreak
               Mark.A        if AlphaBreak
               Mark.B        if BetaBreak
             )
          )
          else
          (
             Analyzer.ReProgram
             (
               Sample.Enable if AlphaBreak||BetaBreak
               Mark.A if AlphaBreak
               Mark.B if BetaBreak
             )
          )
          Break.Delete /Alpha /Beta /Charly
          Break.SetFunc
          Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
	    )
        if a.mode.flow()
        (
          Break.Delete /TraceData
          Break.Set task.config(magic) /TraceData
        )
      )
      menuitem "[:perf]Show &Numerical"     "Trace.STATistic.TASKFUNC"
      menuitem "[:perf]Show as &Tree"       "Trace.STATistic.TASKTREE"
      menuitem "[:perf]Show &Detailed Tree" "Trace.STATistic.TASKTREE ALL"
      menuitem "[:achart]Show as &Timing"   "Trace.CHART.TASKFUNC"
      menuitem "[:alist]Show N&esting"      "Trace.List List.TASK FUNC TI.FUNC"
    )
    popup "Task &Status"
    (
      menuitem "&Prepare"
      (
        if t.method.analyzer()
        (
          Analyzer.AutoInit on
        )
        if (ice()||fire())&&!a.mode.flow()
        (
          Analyzer.ReProgram
          (
            Sample.Enable if AlphaBreak&&Write
          )
          Break.Delete /Alpha
          Break.Set task.config(magic)++(task.config(magicsize)-1) /Alpha
          TASK.TASKState
        )
      )
      menuitem "[:perf]Show &Numerical"   "Trace.STATistic.TASKSTATE"
      menuitem "[:achart]Show as &Timing" "Trace.CHART.TASKSTATE"
      menuitem "[:achart]Tracking with Trace &List"
      (
        Trace.List List.TASK DEFault /Track
        Trace.CHART.TASKSTATE /Track
      )
    )
  )
  popup "&Help"
  (
     menuitem "ThreadX Awareness Manual" "HELP __RTOS_THREADX_"
  )
)


menu "task.th"
(
  default
  menuitem "Display Detailed"  "TASK.THread track.address()"
  menuitem "Display Thread Struct"
  (
    &address=address.offset(track.address())
    Var.View %m %s (TX_THREAD*)&address
  )
  separator
  menuitem "Display Stack Frame"
  (
    &address=address.offset(track.address())
    Var.Frame /Locals /Caller /Task &address
  )
  menuitem "Display Registers"
  (
    &address=address.offset(track.address())
    Register /SpotLight /Task &address
  )
  menuitem "Switch Context"       "Register.TASK track.address()"
  if cpufamily()!="SC100"
  (
    separator
    menuitem "Add to Stack Cov"  "TASK.STK.ADD address.offset(track.address())"
    menuitem "Rm from Stack Cov" "TASK.STK.RM  address.offset(track.address())"
  )
  separator
  menuitem "Dump Thread Struct"  "Data.dump track.address()"
)


menu "task.by"
(
  default
  menuitem "Display Detailed"  "TASK.BYtemem track.address()"
  menuitem "Display Byte Pool Struct"
  (
    &address=address.offset(track.address())
    Var.View %m %s (TX_BYTE_POOL*)&address
  )
  separator
  menuitem "Dump Byte Pool Struct" "Data.dump track.address()"
)
